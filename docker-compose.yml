services:
  backend-flask:
    environment:
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      CONNECTION_URL: "${CONNECTION_URL}"
      OTEL_SERVICE_NAME: 'backend-flask'
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      AWS_XRAY_URL: "*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      AWS_REGION: "${AWS_REGION}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      ROLLBAR_ACCESS_TOKEN: "${ROLLBAR_ACCESS_TOKEN}"
    build: ./backend-flask
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:4567"]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  frontend-react-js:
    environment:
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      REACT_APP_AWS_PROJECT_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_COGNITO_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_USER_POOLS_ID: "us-east-1_QAvGiVjlO"
      REACT_APP_CLIENT_ID: "1ivh1453sq1qtbj746ophasfd3"
    build: ./frontend-react-js
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react-js:/frontend-react-js
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000"]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  db:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - internal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  dynamodb-local:
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - internal-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000"]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  # xray-daemon:
  #     image: "amazon/aws-xray-daemon"
  #     environment:
  #       AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  #       AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  #       AWS_REGION: "us-east-1"
  #     command:
  #       - "xray -o -b xray-daemon:2000"
  #     ports:
  #       - 2000:2000/udp
  #     networks:
  #       - internal-network

# # New-Relic
#   agent:
#     container_name: newrelic-infra
#     build:
#       context: ./New-Relic/newrelic-infra
#       dockerfile: newrelic-infra.dockerfile
#     ports:
#       - "7000:7000"
#     cap_add:
#       - SYS_PTRACE
#     pid: host
#     privileged: true
#     volumes:
#       - "/:/host:ro"
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     restart: unless-stopped
#     networks:
#       - internal-network
#     healthcheck:
#       test: ["CMD-SHELL", "curl --silent --fail http://localhost:7000"]
#       interval: 60s
#       retries: 5
#       start_period: 20s
#       timeout: 10s

networks:
  internal-network:
    driver: bridge

volumes:
  db:
    driver: local
